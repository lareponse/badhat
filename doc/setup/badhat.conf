### /etc/apache2/badhat/badhat.conf
DocumentRoot ${SITE_ROOT}/app/public

###############################################
# Enforce max‐length limits
###############################################
LimitRequestLine      2048
LimitRequestFieldSize 2048
LimitRequestFields    50

###############################################
# BADHAT PHP Hardening & Resource Limits
###############################################
# Purpose:
#   • Apply security restrictions to mitigate common PHP
#     vulnerabilities (RFI, LFI, SSRF, code injection).
#   • Enforce resource usage limits to prevent DoS or
#     runaway scripts (memory/time exhaustion, huge uploads).
#
# Configuration breakdown:
#   open_basedir        – Restricts all file operations
#                         (include/require/fopen, etc.) to your
#                         application directories.
#   allow_url_include   – Disallow include/require() of remote URLs
#                         (blocks Remote File Inclusion attacks).
#   allow_url_fopen     – Disallow file functions (fopen, file_get_contents)
#                         from accessing remote URLs (blocks SSRF).
#   disable_functions   – Disable dangerous built-in functions that
#                         invoke the shell or eval arbitrary code.
#   memory_limit        – Caps memory per PHP process to avoid
#                         runaway RAM usage.
#   max_execution_time  – Caps script run-time to avoid long-running
#                         or hung processes.
#   post_max_size       – Limits total size of POST bodies (uploads).
#   max_input_vars      – Limits number of GET/POST/COOKIE variables
#                         (mitigate hash collisions, exploitation).
###############################################
php_admin_value open_basedir "${SITE_ROOT}/app/:${SITE_ROOT}/add/:/tmp"
php_admin_value allow_url_include Off
php_admin_value allow_url_fopen   Off
php_admin_value disable_functions "exec,system,shell_exec,passthru,eval"
php_admin_value memory_limit      32M
php_admin_value max_execution_time 5
php_admin_value post_max_size     1M
php_admin_value max_input_vars    100

###############################################
# BADHAT: Session Security & Error Logging
###############################################
# Purpose:
#   • Enforce secure cookie handling to protect session data.
#   • Enable strict session ID validation to mitigate fixation attacks.
#   • Suppress PHP error output to users while still logging all relevant issues.
#   • Route errors cleanly into the server’s error log with full detail.
#
# Configuration breakdown:
#   session.cookie_httponly    – Prevents JavaScript from accessing the session cookie.
#   session.cookie_secure      – Ensures cookies are only sent over HTTPS.
#   session.use_strict_mode    – Rejects uninitialized or invalid session IDs.
#   display_errors             – Disables on-screen error messages for end users.
#   error_reporting            – Controls which levels of errors are reported.
#   error_log                  – Sends error messages to the webserver’s stderr (Apache error log).
#   log_errors_max_len         – 0 = no truncation; log full error message.
#   ignore_repeated_errors     – 0 = log every occurrence, even duplicates.
#   html_errors                – Off = format errors in plain text, not HTML.
###############################################
php_admin_value session.cookie_httponly 1
php_admin_value session.cookie_secure   0
php_admin_value session.use_strict_mode 1
php_admin_value display_errors    Off
php_admin_value error_reporting   "E_ALL"
php_admin_value error_log         /proc/self/fd/2
php_admin_value log_errors_max_len   0
php_admin_value ignore_repeated_errors 0
php_admin_value html_errors       Off

###############################################
# BADHAT: Baseline Rewrite Rules
###############################################
# Purpose:
#   • Prevent directory browsing and disallowed file access.
#   • Enforce only safe HTTP methods (block uncommon/unsafe verbs).
#   • Mitigate path-traversal, null-byte injection, and dot-file exposure.
#   • Serve existing files/directories directly; route all other requests
#     to your front-controller (e.g., index.php) for centralized handling.
#
# Breakdown of directives:
#   <Directory>             – Scope these rules to your public webroot.
#   Options                – Disable unwanted Apache features.
#   AllowOverride None     – Prevent .htaccess overrides for consistency.
#   Require all granted    – Allow all requests (filtering is via RewriteRules).
#   AcceptPathInfo Off     – Disallow extra “/foo” path info if not needed.
#   RewriteEngine On       – Enable mod_rewrite.
#
#   RewriteCond/RewriteRule – Pattern + condition syntax for flexible blocking.
###############################################
<Directory "${SITE_ROOT}/app/public">
    Options -Indexes -MultiViews +FollowSymLinks
    AllowOverride None
    Require all granted
    AcceptPathInfo Off

    RewriteEngine On

    # Block bad HTTP methods
    RewriteCond %{REQUEST_METHOD} !^(GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS)$ [NC]
    RewriteRule .* - [F]

    # Block directory-traversal and null
    RewriteCond %{REQUEST_URI} \\.\\.           [OR]
    RewriteCond %{REQUEST_URI} (%2e){2}       [NC,OR]
    RewriteCond %{REQUEST_URI} %00            [NC]
    RewriteRule .* - [F]

    # Block dot-files
    RewriteRule "(^|/)\\." - [F]

    # Serve existing files or dirs
    RewriteCond %{REQUEST_FILENAME} -f [OR]
    RewriteCond %{REQUEST_FILENAME} -d
    RewriteRule ^ - [L]

    # Fallback to front-controller
    RewriteRule ^ /index.php [QSA,L]
</Directory>

###############################################
# BADHAT: Security Headers & Compression Setup
###############################################
# Purpose:
#   • Enforce robust HTTP headers to mitigate clickjacking,
#     MIME-sniffing, referral leaks, and information disclosure.
#   • Remove technology-identifying headers for obscurity.
#   • Enable text/compressible content compression via DEFLATE/Brotli.
#
# Header directives:
#   X-Frame-Options             – Prevents embedding in frames/iframes
#                                 on other origins (clickjacking defense).
#   Content-Security-Policy     – Restricts where your pages may be framed.
#   X-Content-Type-Options      – Stops MIME-type sniffing by browsers.
#   Referrer-Policy             – Controls Referer header on cross-origin requests.
#   Vary                        – Ensures caches vary on Accept-Encoding
#                                 so compressed and uncompressed responses
#                                 are cached separately.
#   X-Powered-By                – Hides PHP/version header to reduce fingerprinting.
#
# Compression modules:
#   mod_deflate                 – Standard gzip/deflate compression.
#   mod_brotli                  – Brotli compression for modern clients.
###############################################
Header always set X-Frame-Options        "SAMEORIGIN"
Header always set Content-Security-Policy "frame-ancestors 'self'"
Header always set X-Content-Type-Options "nosniff"
Header always set Referrer-Policy        "strict-origin-when-cross-origin"
Header always set Vary "Accept-Encoding"
Header unset X-Powered-By

<IfModule mod_deflate.c>
  AddOutputFilterByType DEFLATE text/html text/css application/javascript
</IfModule>
<IfModule mod_brotli.c>
  AddOutputFilterByType BROTLI_COMPRESS text/html text/css application/javascript
</IfModule>
