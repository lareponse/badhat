1. bit
* use boolean variables for binary or ternary decisions (true/false/null)

2. sequence
* then use integers as bitmasks
    * dont use string if you can use an integer. php constant are more explicit and accessible than strings
    * dont use arrays of boolean
3. collections: array, map, set
    * use array for list, map for key/value, set for unique values
    * loops are faster than array functions, use while, for, maybe 
4. blocks
    structure
    * no switch, no match, as little if/elseif/else as possible

    function
    * config is function signature, set values where you need them, use constant for shared values
    * wrapping for convenience is not allowed, dont like php? go write elixir.
        this is lazy and opinionated
            function e($value): string
            {
                return htmlspecialchars((string)$value, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');
            }
    * bundling is acceptable, and requires at leat two native functions
5. Files
6. Folders
7. Quest
* dont test ahead, expect success, use error handling to drive failure response
8. Session
9. Journey
